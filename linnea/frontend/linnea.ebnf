@@eol_comments :: /#.*?$/
# @@whitespace :: /[\t ]+/
# @@whitespace :: /[^\S\r\n]+/

model = var_declarations:var_declarations op_declarations:op_declarations assignments:assignments $ ;

var_declarations = { @+:var_declaration } ;
op_declarations = { @+:op_declaration } ;
assignments = { @+:assignment } ;

var_declaration = lhs:identifier "=" ~ rhs:integer ;


op_declaration = 
            | (optype:"Scalar" ~ name:identifier "<" iotype:io ">")
            | (optype:"RowVector" ~ name:identifier dims:dim_vector "<" iotype:io { "," properties+:properties } ">")
            | (optype:"ColumnVector" ~ name:identifier dims:dim_vector "<" iotype:io { "," properties+:properties } ">")
            | (optype:"Matrix" ~ name:identifier dims:dim_matrix "<" iotype:io { "," properties+:properties } ">")
            | (optype:"IdentityMatrix" ~ name:identifier dims:dim_matrix);
assignment = lhs:identifier "=" ~ rhs:expression ;

identifier = ?"[a-zA-Z_][a-zA-Z0-9_]*" ;
constant = ?"[0-9]+(\.[0-9]+)?([Ee][+-]?[0-9]+)?" ;
integer = ?"[0-9]+" ;
# eol = ?"[\r\n]+";

func_unary_prefix = "trans" | "inv" | "det" | "norm" | "exp" | "log";
func_unary_suffix = "'";
io = "Input" | "Output" | "InOut" | "Intermediate";
dim_vector = "(" length:identifier ")";
dim_matrix = "(" rows:identifier "," columns:identifier ")";
properties =
        | @:"Square"            | @:"SPD"               | @:"ColumnPanel"
        | @:"RowPanel"          | @:"Diagonal"          | @:"Tridiagonal"
        | @:"Banded"            | @:"LowerTriangular"   | @:"UpperTriangular"
        | @:"UnitDiagonal"      | @:"Symmetric"         | @:"Hessenberg"
        | @:"Orthogonal"        | @:"FullRank"          | @:"Non-singular" ;


expression =
        #| args:term { op+:("+" | "-") args:term }+
        #| (op:("+" | "-"))>{ args:term }+
        | args+:term op:"*" args+:expression
        | @:term ;
term =  
        | op:"-" args+:term
        #| op:"*">{ args+:factor }+
        | args+:factor op:"*" args+:term
        | @:factor ;
factor =
        | args+:atom op:"^" args+:atom
        | args+:atom op:func_unary_suffix
        | @:atom ;
atom =  
        | "(" @:expression ")"
        | op:func_unary_prefix "(" args+:expression  ")"
        | @:identifier
        | @:constant ;


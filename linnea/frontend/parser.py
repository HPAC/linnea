#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


KEYWORDS = {}


class LinneaBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='#.*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(LinneaBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class LinneaParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='#.*?$',
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=LinneaBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(LinneaParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _model_(self):
        self._var_declarations_()
        self.name_last_node('var_declarations')
        self._op_declarations_()
        self.name_last_node('op_declarations')
        self._assignments_()
        self.name_last_node('assignments')
        self._check_eof()
        self.ast._define(
            ['assignments', 'op_declarations', 'var_declarations'],
            []
        )

    @graken()
    def _var_declarations_(self):

        def block0():
            self._var_declaration_()
            self.add_last_node_to_name('@')
        self._closure(block0)

    @graken()
    def _op_declarations_(self):

        def block0():
            self._op_declaration_()
            self.add_last_node_to_name('@')
        self._closure(block0)

    @graken()
    def _assignments_(self):

        def block0():
            self._assignment_()
            self.add_last_node_to_name('@')
        self._closure(block0)

    @graken()
    def _var_declaration_(self):
        self._identifier_()
        self.name_last_node('lhs')
        self._token('=')
        self._cut()
        self._integer_()
        self.name_last_node('rhs')
        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _op_declaration_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._token('Scalar')
                    self.name_last_node('optype')
                    self._cut()
                    self._identifier_()
                    self.name_last_node('name')
                    self._token('<')
                    self._io_()
                    self.name_last_node('iotype')
                    self._token('>')
            with self._option():
                with self._group():
                    self._token('RowVector')
                    self.name_last_node('optype')
                    self._cut()
                    self._identifier_()
                    self.name_last_node('name')
                    self._dim_vector_()
                    self.name_last_node('dims')
                    self._token('<')
                    self._io_()
                    self.name_last_node('iotype')

                    def block7():
                        self._token(',')
                        self._properties_()
                        self.add_last_node_to_name('properties')
                    self._closure(block7)
                    self._token('>')
            with self._option():
                with self._group():
                    self._token('ColumnVector')
                    self.name_last_node('optype')
                    self._cut()
                    self._identifier_()
                    self.name_last_node('name')
                    self._dim_vector_()
                    self.name_last_node('dims')
                    self._token('<')
                    self._io_()
                    self.name_last_node('iotype')

                    def block13():
                        self._token(',')
                        self._properties_()
                        self.add_last_node_to_name('properties')
                    self._closure(block13)
                    self._token('>')
            with self._option():
                with self._group():
                    self._token('Matrix')
                    self.name_last_node('optype')
                    self._cut()
                    self._identifier_()
                    self.name_last_node('name')
                    self._dim_matrix_()
                    self.name_last_node('dims')
                    self._token('<')
                    self._io_()
                    self.name_last_node('iotype')

                    def block19():
                        self._token(',')
                        self._properties_()
                        self.add_last_node_to_name('properties')
                    self._closure(block19)
                    self._token('>')
            with self._option():
                with self._group():
                    self._token('IdentityMatrix')
                    self.name_last_node('optype')
                    self._cut()
                    self._identifier_()
                    self.name_last_node('name')
                    self._dim_matrix_()
                    self.name_last_node('dims')
            self._error('no available options')
        self.ast._define(
            ['dims', 'iotype', 'name', 'optype'],
            ['properties']
        )

    @graken()
    def _assignment_(self):
        self._identifier_()
        self.name_last_node('lhs')
        self._token('=')
        self._cut()
        self._expression_()
        self.name_last_node('rhs')
        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @graken()
    def _identifier_(self):
        self._pattern(r'[a-zA-Z_][a-zA-Z0-9_]*')

    @graken()
    def _constant_(self):
        self._pattern(r'[0-9]+(\.[0-9]+)?([Ee][+-]?[0-9]+)?')

    @graken()
    def _integer_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _func_unary_prefix_(self):
        with self._choice():
            with self._option():
                self._token('trans')
            with self._option():
                self._token('inv')
            with self._option():
                self._token('det')
            with self._option():
                self._token('norm')
            with self._option():
                self._token('exp')
            with self._option():
                self._token('log')
            self._error('expecting one of: det exp inv log norm trans')

    @graken()
    def _func_unary_suffix_(self):
        self._token("'")

    @graken()
    def _io_(self):
        with self._choice():
            with self._option():
                self._token('Input')
            with self._option():
                self._token('Output')
            with self._option():
                self._token('InOut')
            with self._option():
                self._token('Intermediate')
            self._error('expecting one of: InOut Input Intermediate Output')

    @graken()
    def _dim_vector_(self):
        self._token('(')
        self._identifier_()
        self.name_last_node('length')
        self._token(')')
        self.ast._define(
            ['length'],
            []
        )

    @graken()
    def _dim_matrix_(self):
        self._token('(')
        self._identifier_()
        self.name_last_node('rows')
        self._token(',')
        self._identifier_()
        self.name_last_node('columns')
        self._token(')')
        self.ast._define(
            ['columns', 'rows'],
            []
        )

    @graken()
    def _properties_(self):
        with self._choice():
            with self._option():
                self._token('Square')
                self.name_last_node('@')
            with self._option():
                self._token('SPD')
                self.name_last_node('@')
            with self._option():
                self._token('ColumnPanel')
                self.name_last_node('@')
            with self._option():
                self._token('RowPanel')
                self.name_last_node('@')
            with self._option():
                self._token('Diagonal')
                self.name_last_node('@')
            with self._option():
                self._token('Tridiagonal')
                self.name_last_node('@')
            with self._option():
                self._token('Banded')
                self.name_last_node('@')
            with self._option():
                self._token('LowerTriangular')
                self.name_last_node('@')
            with self._option():
                self._token('UpperTriangular')
                self.name_last_node('@')
            with self._option():
                self._token('UnitDiagonal')
                self.name_last_node('@')
            with self._option():
                self._token('Symmetric')
                self.name_last_node('@')
            with self._option():
                self._token('Hessenberg')
                self.name_last_node('@')
            with self._option():
                self._token('Orthogonal')
                self.name_last_node('@')
            with self._option():
                self._token('FullRank')
                self.name_last_node('@')
            with self._option():
                self._token('Non-singular')
                self.name_last_node('@')
            self._error('expecting one of: Banded ColumnPanel Diagonal FullRank Hessenberg LowerTriangular Non-singular Orthogonal RowPanel SPD Square Symmetric Tridiagonal UnitDiagonal UpperTriangular')

    @graken()
    def _expression_(self):
        with self._choice():
            with self._option():
                self._term_()
                self.add_last_node_to_name('args')
                self._token('*')
                self.name_last_node('op')
                self._expression_()
                self.add_last_node_to_name('args')
            with self._option():
                self._term_()
                self.name_last_node('@')
            self._error('no available options')
        self.ast._define(
            ['op'],
            ['args']
        )

    @graken()
    def _term_(self):
        with self._choice():
            with self._option():
                self._token('-')
                self.name_last_node('op')
                self._term_()
                self.add_last_node_to_name('args')
            with self._option():
                self._factor_()
                self.add_last_node_to_name('args')
                self._token('*')
                self.name_last_node('op')
                self._term_()
                self.add_last_node_to_name('args')
            with self._option():
                self._factor_()
                self.name_last_node('@')
            self._error('no available options')
        self.ast._define(
            ['op'],
            ['args']
        )

    @graken()
    def _factor_(self):
        with self._choice():
            with self._option():
                self._atom_()
                self.add_last_node_to_name('args')
                self._token('^')
                self.name_last_node('op')
                self._atom_()
                self.add_last_node_to_name('args')
            with self._option():
                self._atom_()
                self.add_last_node_to_name('args')
                self._func_unary_suffix_()
                self.name_last_node('op')
            with self._option():
                self._atom_()
                self.name_last_node('@')
            self._error('no available options')
        self.ast._define(
            ['op'],
            ['args']
        )

    @graken()
    def _atom_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._expression_()
                self.name_last_node('@')
                self._token(')')
            with self._option():
                self._func_unary_prefix_()
                self.name_last_node('op')
                self._token('(')
                self._expression_()
                self.add_last_node_to_name('args')
                self._token(')')
            with self._option():
                self._identifier_()
                self.name_last_node('@')
            with self._option():
                self._constant_()
                self.name_last_node('@')
            self._error('no available options')
        self.ast._define(
            ['op'],
            ['args']
        )


class LinneaSemantics(object):
    def model(self, ast):
        return ast

    def var_declarations(self, ast):
        return ast

    def op_declarations(self, ast):
        return ast

    def assignments(self, ast):
        return ast

    def var_declaration(self, ast):
        return ast

    def op_declaration(self, ast):
        return ast

    def assignment(self, ast):
        return ast

    def identifier(self, ast):
        return ast

    def constant(self, ast):
        return ast

    def integer(self, ast):
        return ast

    def func_unary_prefix(self, ast):
        return ast

    def func_unary_suffix(self, ast):
        return ast

    def io(self, ast):
        return ast

    def dim_vector(self, ast):
        return ast

    def dim_matrix(self, ast):
        return ast

    def properties(self, ast):
        return ast

    def expression(self, ast):
        return ast

    def term(self, ast):
        return ast

    def factor(self, ast):
        return ast

    def atom(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = LinneaParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from grako.util import asjson

    ast = generic_main(main, LinneaParser, name='Linnea')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()

